name: deployment

on: 
 push:
   branches:
     - main

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        persist-credentials: false
    - name: setup nodeJS
      uses: actions/setup-node@v2
      with: 
        node-version : 20
    - name: installing the neccessary packages
      working-directory: ./frontend
      run: |
        npm install
        npm run build

    - name: completed successfully
      run: echo "completed"

  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
            persist-credentials: false
      - name: setup nodeJS
        uses: actions/setup-node@v2
        with: 
          node-version : 20
      - name: installing the neccessary packages
        working-directory: ./backend
        run: |
          npm install
          npm run build
  

      - name: completed successfully
        run: echo "completed"


  deploy:
    runs-on: self-hosted
    needs: 
      - build-frontend
      - build-backend
    steps:
      - name: checkout code
        uses: actions/checkout@v2

      - name: installing the node
        uses: actions/setup-node@v2
        with:
          node-version: 20
      - name: Update PowerShellGet and NuGet
        shell: powershell
        run: |
            Set-PSRepository -Name "PSGallery" -InstallationPolicy Trusted
            Install-PackageProvider -Name NuGet -Force -Scope CurrentUser
            Install-Module -Name PowerShellGet -Force -Scope CurrentUser
            Update-Module -Name PowerShellGet -Force -Scope CurrentUser
      
      - name: Install Posh-SSH
        shell: powershell
        run: |
            Install-Module -Name Posh-SSH -Force -Scope CurrentUser
 
      - name: Deploy and Start Services
        shell: powershell
        run: |
            # Define credentials
            $password = ConvertTo-SecureString "admin@123" -AsPlainText -Force
            $credential = New-Object System.Management.Automation.PSCredential("ubuntu", $password)
  
            # SSH to the remote server and execute commands
            $commands = @"
            cd /home/ubuntu/Project
            git pull origin main
            cd frontend
            npm install
            npm run build
            nohup npm start > frontend.log 2>&1 &
            cd ../backend
            npm install
            npm run build
            nohup npm start > backend.log 2>&1 &
            "@
  
            # Use SSH to run commands on the Linux server
            $session = New-SSHSession -ComputerName "192.168.1.126" -Credential $credential
            Invoke-SSHCommand -SessionId $session.SessionId -Command $commands
            Remove-SSHSession -SessionId $session.SessionId
  